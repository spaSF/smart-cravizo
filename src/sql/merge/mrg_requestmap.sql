SET DEFINE OFF;
MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  22 as ID,
  0 as VERSION,
  'ROLE_LOAD_DS' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/loadds.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  23 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menuitem/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  41 as ID,
  1 as VERSION,
  'ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  42 as ID,
  1 as VERSION,
  'ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/getroles.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  61 as ID,
  2 as VERSION,
  'ROLE_ADMIN,ROLE_WSTEST,ROLE_WSAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  62 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  63 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobaview/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  81 as ID,
  2 as VERSION,
  'ROLE_CRFOAPP,ROLE_ADMIN,ROLE_APPAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/*cis/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  82 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobyt/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  83 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnyvztah/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  84 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobahistory/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  85 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/doklad/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  86 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/obmpravnejspos/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  87 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovmodif/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  88 as ID,
  1 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statnaprislusnot/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  89 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/udelstobcianstvo/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  90 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobytu/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  91 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zrusvyhlmrtvy/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  92 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zaujmosobasys/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  93 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menoosoby/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  94 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/priezvisko/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  95 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodnepriezvisko/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  96 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titul/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  101 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobytregion/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  121 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/services' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  122 as ID,
  3 as VERSION,
  'ROLE_ADMIN,ROLE_WSREAD,ROLE_SUPER,ROLE_WSAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/services/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  123 as ID,
  0 as VERSION,
  'ROLE_SUPER' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/**/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  141 as ID,
  3 as VERSION,
  'ROLE_ADMIN,ROLE_WSREAD,ROLE_SUPER' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/services/**/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  161 as ID,
  1 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/wsresend.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  162 as ID,
  1 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/ws1resendout.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  181 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/isomorphic/idacall**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  201 as ID,
  0 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/save.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  202 as ID,
  0 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/savegroup.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  204 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparam/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  205 as ID,
  1 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestosoba/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  221 as ID,
  1 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/updatepassword.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  241 as ID,
  0 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  242 as ID,
  0 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventosoba/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  261 as ID,
  0 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/osobaeventlog.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  262 as ID,
  0 as VERSION,
  'ROLE_ADMIN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/osobarequestlog.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  281 as ID,
  0 as VERSION,
  'ROLE_CRFOAPP' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/report*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  301 as ID,
  0 as VERSION,
  'ROLE_ADMIN,ROLE_SUPER' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/delete.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  321 as ID,
  1 as VERSION,
  'ROLE_SUPER,ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/systemcis/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  341 as ID,
  2 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/hotnews/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  382 as ID,
  0 as VERSION,
  'ROLE_LOAD_DS' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/xlsexport*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  421 as ID,
  0 as VERSION,
  'ROLE_ADMIN,ROLE_WSTEST' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestnnd/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  501 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartusersettings/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  502 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/help/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  521 as ID,
  0 as VERSION,
  'ROLE_WSAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/services/crfowsa/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  541 as ID,
  0 as VERSION,
  'ROLE_WSAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/services/crfowsa**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  542 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobytregion/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  543 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobytregion/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  544 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobytregion/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  545 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobytregion/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  546 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobyturegion/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  547 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobyturegion/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  548 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobyturegion/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  549 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobyturegion/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  550 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pohlaviecis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  551 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pohlaviecis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  552 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pohlaviecis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  553 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pohlaviecis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  554 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventosoba/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  555 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventosoba/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  556 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventosoba/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  557 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventosoba/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  558 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestosoba/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  559 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestosoba/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  560 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestosoba/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  561 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestosoba/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  562 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparam/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  563 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparam/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  564 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparam/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  565 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparam/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  566 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/hotnews/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  567 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/hotnews/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  568 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/hotnews/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  569 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/hotnews/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  570 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestfiles/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  571 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestfiles/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  572 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestfiles/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  573 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestfiles/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  574 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/xsdschemycis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  575 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/xsdschemycis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  576 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/xsdschemycis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  577 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/xsdschemycis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  578 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  579 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  580 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  581 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  582 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobyt/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  583 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobyt/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  584 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobyt/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  585 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/pobyt/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  586 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/doklad/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  587 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/doklad/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  588 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/doklad/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  589 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/doklad/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  590 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menoosoby/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  591 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menoosoby/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  592 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menoosoby/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  593 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menoosoby/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  594 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/obmpravnejspos/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  595 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/obmpravnejspos/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  596 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/obmpravnejspos/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  597 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/obmpravnejspos/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  598 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobahistory/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  599 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobahistory/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  600 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobahistory/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  601 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobahistory/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  602 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/priezvisko/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  603 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/priezvisko/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  604 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/priezvisko/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  605 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/priezvisko/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  606 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnyvztah/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  607 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnyvztah/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  608 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnyvztah/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  609 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnyvztah/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  610 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodnepriezvisko/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  611 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodnepriezvisko/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  612 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodnepriezvisko/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  613 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodnepriezvisko/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  614 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovmodif/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  615 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovmodif/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  616 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovmodif/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  617 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovmodif/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  618 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statnaprislusnot/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  619 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statnaprislusnot/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  620 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statnaprislusnot/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  621 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statnaprislusnot/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  622 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titul/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  623 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titul/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  624 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titul/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  625 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titul/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  626 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/udelstobcianstvo/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  627 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/udelstobcianstvo/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  628 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/udelstobcianstvo/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  629 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/udelstobcianstvo/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  630 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobytu/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  631 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobytu/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  632 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobytu/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  633 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zakazpobytu/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  634 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zaujmosobasys/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  635 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zaujmosobasys/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  636 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zaujmosobasys/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  637 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zaujmosobasys/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  638 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zrusvyhlmrtvy/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  639 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zrusvyhlmrtvy/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  640 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zrusvyhlmrtvy/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  641 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/zrusvyhlmrtvy/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  642 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/systemcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  643 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/systemcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  644 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/systemcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  645 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/systemcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  646 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  647 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  648 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  649 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  650 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/druhdokladucis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  651 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/druhdokladucis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  652 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/druhdokladucis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  653 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/druhdokladucis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  654 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/kodopovedecis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  655 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/kodopovedecis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  656 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/kodopovedecis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  657 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/kodopovedecis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  658 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnystavcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  659 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnystavcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  660 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnystavcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  661 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rodinnystavcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  662 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/narodnostcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  663 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/narodnostcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  664 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/narodnostcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  665 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/narodnostcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  666 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regdomcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  667 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regdomcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  668 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regdomcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  669 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regdomcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  670 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicacis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  671 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicacis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  672 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicacis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  673 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicacis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  674 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regvchoddomucis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  675 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regvchoddomucis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  676 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regvchoddomucis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  677 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regvchoddomucis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  678 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  679 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  680 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  681 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/skupudajovcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  682 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  683 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  684 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  685 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/statcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  686 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomucis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  687 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomucis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  688 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomucis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  689 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomucis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  690 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomvchodcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  691 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomvchodcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  692 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomvchodcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  693 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stavdomvchodcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  694 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stupenzverejcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  695 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stupenzverejcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  696 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stupenzverejcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  697 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/stupenzverejcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  698 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titulcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  699 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titulcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  700 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titulcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  701 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/titulcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  702 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typobmsposcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  703 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typobmsposcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  704 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typobmsposcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  705 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typobmsposcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  706 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localecountry/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  707 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localecountry/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  708 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localecountry/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  709 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localecountry/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  710 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localelang/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  711 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localelang/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  712 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localelang/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  713 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localelang/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  714 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/role/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  715 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/role/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  716 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/role/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  717 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/role/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  718 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  719 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  720 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  721 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  722 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/getroles.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  723 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/deleterole.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  724 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/rolegroup/saverole.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  725 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menuitem/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  726 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menuitem/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  727 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menuitem/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  728 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menuitem/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  729 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  730 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  731 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  732 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  733 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  734 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  735 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  736 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  737 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/menuitem/getone.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  741 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/getroles.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  742 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/deleterole.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  743 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/saverole.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  744 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  745 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  746 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  747 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  748 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsourcefield/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  749 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsourcefield/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  750 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsourcefield/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  751 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsourcefield/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  752 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/getallroles.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  753 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/getgroups.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  754 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/deletegroup.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  755 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/savegroup.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  756 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/configproperty/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  757 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/configproperty/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  758 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/configproperty/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  759 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/configproperty/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  760 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestmap/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  761 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestmap/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  762 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestmap/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  763 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestmap/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  764 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperation/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  765 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperation/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  766 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperation/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  767 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperation/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  768 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperationparam/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  769 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperationparam/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  770 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperationparam/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  771 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartoperationparam/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  776 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typosobycis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  777 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typosobycis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  778 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typosobycis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  779 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typosobycis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  780 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typpobytucis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  781 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localelang/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  782 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/index.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  783 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/get*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  784 as ID,
  1 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/logout*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  785 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  786 as ID,
  1 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/index*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  787 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/**/js/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  788 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/**/css/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  789 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/**/images/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  790 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/**/favicon.ico' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  791 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/isomorphic/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  792 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/loadlocale*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  793 as ID,
  0 as VERSION,
  'permitAll' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/login/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  794 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/loaduser*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  795 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/home*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  796 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typvztahcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  797 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzivatel/update.*' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  798 as ID,
  0 as VERSION,
  'ROLE_SUPER' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  799 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typvztahcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  800 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ulicaobcecis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  801 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ulicaobcecis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  802 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ulicaobcecis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  803 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ulicaobcecis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  804 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzemnycelokcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  805 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzemnycelokcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  806 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzemnycelokcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  807 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uzemnycelokcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  808 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobaview/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  809 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobaview/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  810 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobaview/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  811 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osobaview/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  812 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  813 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  814 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  815 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  816 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  817 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  818 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  819 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  820 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparamcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  821 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparamcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  822 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparamcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  823 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestparamcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  824 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ldapgroup/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  825 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ldapgroup/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  826 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ldapgroup/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  827 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ldapgroup/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  828 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestnnd/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  829 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestnnd/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  830 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestnnd/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  831 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestnnd/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  832 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizvybavcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  833 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizvybavcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  834 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizvybavcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  835 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizvybavcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  840 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizo/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  841 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizo/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  842 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizo/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  843 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizo/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  844 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoatributy/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  845 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoatributy/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  846 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoatributy/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  847 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoatributy/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  848 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizomeno/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  849 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizomeno/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  850 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizomeno/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  851 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizomeno/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  852 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosoba/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  853 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosoba/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  854 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosoba/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  855 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosoba/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  856 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosobaview/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  857 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosobaview/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  858 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosobaview/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  859 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosobaview/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  860 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopobyt/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  861 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopobyt/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  862 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopobyt/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  863 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopobyt/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  864 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopriezvisko/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  865 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopriezvisko/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  866 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopriezvisko/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  867 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizopriezvisko/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  868 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodinnyvztah/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  869 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodinnyvztah/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  870 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodinnyvztah/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  871 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodinnyvztah/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  872 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodnepriez/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  873 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodnepriez/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  874 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodnepriez/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  875 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizorodnepriez/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  876 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizostatnaprislusnot/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  877 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizostatnaprislusnot/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  878 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizostatnaprislusnot/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  879 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizostatnaprislusnot/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  880 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizotitul/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  881 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizotitul/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  882 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizotitul/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  883 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizotitul/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  884 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoudelstobcianstvo/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  885 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoudelstobcianstvo/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  886 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoudelstobcianstvo/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  887 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoudelstobcianstvo/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  888 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartusersettings/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  889 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartusersettings/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  890 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartusersettings/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  891 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartusersettings/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  892 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  893 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  894 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  895 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  896 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/wsresend.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  897 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/ws1resendout.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  898 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/osoba/report**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  899 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uploadreport/upload**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  900 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/eventlog/geteventfile**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  901 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/uploadreport/uploadsource**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  902 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestfiles/gettextfile**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  903 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/propagate.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  904 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/exportmessages**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  905 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/localization/upload**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  906 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/clonesource.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  907 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/getrequestfile**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  908 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/getresponsefile**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  909 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartnavigator/downloadlog**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  910 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestfiles/openfile**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  911 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/resetotpkey.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  912 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/showotpqr.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  913 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/user/deleteqr.json**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  914 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/xlsexport**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  915 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/smartsource/csvexport**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  919 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestlog/osobarequestlogxls**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  941 as ID,
  0 as VERSION,
  'ROLE_APPAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosoba/createavizo.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1181 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typpobytucis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1182 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typpobytucis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1183 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typpobytucis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1184 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typrolevztcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1185 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typrolevztcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1186 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typrolevztcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1187 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typrolevztcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1188 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typtitulcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1189 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typtitulcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1190 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typtitulcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1191 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typtitulcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1192 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typuzcelokcis/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1193 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typuzcelokcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1194 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typuzcelokcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1195 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typuzcelokcis/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1197 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typvztahcis/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1198 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/typvztahcis/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1232 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notificationview/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1233 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notificationview/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1234 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notificationview/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1235 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notificationview/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1236 as ID,
  1 as VERSION,
  'ROLE_AVADMIN,ROLE_APPAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicaobceview/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1237 as ID,
  1 as VERSION,
  'ROLE_FORBIDDEN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicaobceview/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1238 as ID,
  1 as VERSION,
  'ROLE_FORBIDDEN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicaobceview/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1239 as ID,
  1 as VERSION,
  'ROLE_FORBIDDEN' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/regulicaobceview/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1240 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notifeventenum/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1241 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notifeventenum/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1242 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notifeventenum/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1243 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notifeventenum/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1244 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notiftemplate/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1245 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notiftemplate/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1246 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notiftemplate/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1247 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notiftemplate/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1300 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizolog/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1301 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizolog/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1302 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizolog/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1303 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizolog/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1304 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestavizo/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1305 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestavizo/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1306 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestavizo/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1307 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/requestavizo/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1320 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notification/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1321 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notification/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1322 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notification/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1323 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/notification/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1324 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/jobs/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1325 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/jobs/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1330 as ID,
  0 as VERSION,
  'ROLE_WSAVIZO' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoosoba/sendavizo.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1341 as ID,
  0 as VERSION,
  'ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/jobs/start.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1342 as ID,
  0 as VERSION,
  'ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/jobs/stop.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1343 as ID,
  0 as VERSION,
  'ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/jobs/pause.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1344 as ID,
  0 as VERSION,
  'ROLE_ADMIN,ROLE_AVADM' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/jobs/resume.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1361 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoobmpravnejspos/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1362 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoobmpravnejspos/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1363 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoobmpravnejspos/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1364 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizoobmpravnejspos/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1365 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizozrusvyhlmrtvy/index.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1366 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizozrusvyhlmrtvy/delete.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1367 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizozrusvyhlmrtvy/update.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  1368 as ID,
  0 as VERSION,
  'IS_AUTHENTICATED_FULLY' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/avizozrusvyhlmrtvy/save.json' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

MERGE INTO SC_REQUEST_MAP A USING
 (SELECT
  66942 as ID,
  0 as VERSION,
  'ROLE_SUPER' as CONFIG_ATTRIBUTE,
  NULL as HTTP_METHOD,
  '/ldapgroup/**' as URL
  FROM DUAL) B
ON (A.ID = B.ID)
WHEN NOT MATCHED THEN 
INSERT (
  ID, VERSION, CONFIG_ATTRIBUTE, HTTP_METHOD, URL)
VALUES (
  B.ID, B.VERSION, B.CONFIG_ATTRIBUTE, B.HTTP_METHOD, B.URL)
WHEN MATCHED THEN
UPDATE SET 
  A.VERSION = B.VERSION,
  A.CONFIG_ATTRIBUTE = B.CONFIG_ATTRIBUTE,
  A.HTTP_METHOD = B.HTTP_METHOD,
  A.URL = B.URL;

COMMIT;
