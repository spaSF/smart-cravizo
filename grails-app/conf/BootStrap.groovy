import org.quartz.Scheduler

import grails.plugin.springsecurity.SpringSecurityUtils
import grails.util.Environment

import com.sfs.smartsfs.app.ConfigProperty
import com.sfs.smartsfs.app.Localization
import com.sfs.smartsfs.isc.PlaceOnType
import com.sfs.smartsfs.isc.SmartOperation
import com.sfs.smartsfs.isc.SmartOperationParam
import com.sfs.smartsfs.isc.SmartSource

class BootStrap {

	def grailsApplication
	Scheduler quartzScheduler
	
	def init = { servletContext ->
		SpringSecurityUtils.doWithAuth("admin") {
			//		new SmartSourceField(name:"dsProperties",autoGenerated:null,canEdit:null,canFilter:null,canSave:null,decimalPad:null,decimalPrecision:null,detail:true,displayField:"",dSource:SmartSource.findWhere(ID:"SmartSource"),editRequiresRole:"",editorType:"AutoFitTextAreaItem",fieldPosition:40,foreignDisplayField:"",foreignKey:"",hidden:null,includeFrom:"",includeVia:"",length:2000,primaryKey:null,propertiesOnly:null,readOnlyEditorType:"",required:null,rootValue:"",title:"",type:"text",updateRequiresRole:"",validOperators:"",validators:"",valueXPath:"",viewRequiresRole:"",formItemProps:"{\"width\":\"*\"}",optionDataSource:"",canFocus:true,valueField:"",multiple:null,multipleStorage:"",prompt:"", characterCasing:"",mask:"",valueMap:"").save(flush:true)
			//		new SmartSourceField(name:"formProperties",autoGenerated:null,canEdit:null,canFilter:null,canSave:null,decimalPad:null,decimalPrecision:null,detail:true,displayField:"",dSource:SmartSource.findWhere(ID:"SmartSource"),editRequiresRole:"",editorType:"AutoFitTextAreaItem",fieldPosition:41,foreignDisplayField:"",foreignKey:"",hidden:null,includeFrom:"",includeVia:"",length:2000,primaryKey:null,propertiesOnly:null,readOnlyEditorType:"",required:null,rootValue:"",title:"",type:"text",updateRequiresRole:"",validOperators:"",validators:"",valueXPath:"",viewRequiresRole:"",formItemProps:"{\"width\":\"*\"}",optionDataSource:"",canFocus:true,valueField:"",multiple:null,multipleStorage:"",prompt:"", characterCasing:"",mask:"",valueMap:"").save(flush:true)
			//		new SmartSourceField(name:"hasPdfReport",autoGenerated:null,canEdit:null,canFilter:true,canSave:true,decimalPad:null,decimalPrecision:null,detail:null,displayField:"",dSource:SmartSource.findWhere(ID:"SmartSource"),editRequiresRole:"",editorType:"",fieldPosition:49,foreignDisplayField:"",foreignKey:"",hidden:false,includeFrom:"",includeVia:"",length:null,primaryKey:null,propertiesOnly:null,readOnlyEditorType:"",required:false,rootValue:"",title:"isc.i18nMessages[\"smartSource.hasPdfReport.label\"]",type:"boolean",updateRequiresRole:"",validOperators:"",validators:"",valueXPath:"",viewRequiresRole:"",formItemProps:"{\"allowEmptyValue\":true}",optionDataSource:"",canFocus:true,valueField:"",multiple:null,multipleStorage:"",prompt:"", characterCasing:"",mask:"",valueMap:"").save(flush:true)
			//		new SmartOperation(position:1,code:"downloadLog",needRefresh:false,placeOn:PlaceOnType.GRID,title:"Download LOG file",uri:"/SmartNavigator/downloadLog",useIdAsOnlyParam:false,callbackOnSuccess:"",callbackParam:"",dSource:SmartSource.findWhere(ID:"SmartSource"),prompt:"",requiresRole:"ROLE_SUPER",returnMsgPath:"httpResponseText",returnStatusPath:"httpResponseCode",successTestValue:"200",icon:"[SKIN]/actions/download.png",downloadResult:true).save(flush:true)
			//		new SmartOperationParam(title:"Log file date",fieldPosition: 1,name: "logDate",type: "date", visible:true,initialValue:"",evaluateInitVal:false,scOperation:SmartOperation.findByCode("downloadLog")).save(flush:true)
			//		new ConfigProperty(key:"smartsfs.log.path",value:"tmp/logs",description:"Log file path").save(flush:true)
			//		new ConfigProperty(key:"smartsfs.log.fileName",value:"crfo.log",description:"Log file name").save(flush:true)
			if(Environment.current.name =='sfstest'){
				String ver="(v.${grailsApplication.metadata['app.version']})"
				Localization.findAllByCode('avizo.application.version').each{Localization appTitle->
					appTitle.setText(ver)
					appTitle.save()
				}
			}
			if (grailsApplication.config?.quartz?.autoStartup) {
				quartzScheduler.start()
			}
		}
	}
	def destroy = {
	}
}
